import { HttpHeaders } from '@angular/common/http'
import { Component, OnInit } from '@angular/core'
import { FormBuilder, FormControl, FormGroup } from '@angular/forms'
import Swal from 'sweetalert2'
import { ApiserviceService } from '../../../apiservice.service'
import { ActivatedRoute } from '@angular/router'
import { AncService } from '../../satusehat-anc/services/anc.service'
import { faArrowLeft, faSave } from '@fortawesome/free-solid-svg-icons'
import { ImunisasiService } from '../services/imunisasi.service'

@Component({
  selector: 'app-tulis-imunisasi',
  templateUrl: './tulis-imunisasi.component.html',
  styleUrls: ['./tulis-imunisasi.component.sass']
})

export class TulisImunisasiComponent implements OnInit {
  // property
  userData: any = JSON.parse(localStorage.getItem('userDatacl')).userData
  notransaksi: string = this.route.snapshot.paramMap.get('notrans')
  activeTab: string = 'form-observasi-imunisasi'
  useCaseId: string
  cabangData: any
  idpasien: any
  provinceList: any = []
  dateNow = new Date().toISOString()

  faArrowLeft = faArrowLeft
  faSave = faSave
  isDisabledFormAnc: boolean = true
  headers = new HttpHeaders({
    'kd-cabang': this.userData.kdcabang
  })

  reportImunisasi: any

  patientData: any = {
    noantrian: '-',
    norm: '-',
    pasien: '-',
    umur: '-',
    tgllahir: '-',
    jeniskelamin: '-',
    nampoli: '-',
    costumer: '-',
    namdokter: '-',
    alamat: '-'
  }
  formObservation: FormGroup
  formDiagnosa: FormGroup
  formTindakan: FormGroup
  formPelaporanImunisasi: FormGroup
  formUpdateKunjungan: FormGroup
  
  constructor(
    private api: ApiserviceService,
    private imunisasiService: ImunisasiService,
    private ancService: AncService,
    private route: ActivatedRoute,
    private fb: FormBuilder
  ) { 
    this.formObservation = this.fb.group({
      status_pregnant_code: ['LA15173-0'],
      status_pregnant_display: ['not pregnant'],
      status_sekolah_code: ['OV000320'],
      status_sekolah_display: ['tidak sekolah']
    })

    this.formDiagnosa = this.fb.group({
      diagnosa_code: [''],
      diagnosa_display: ['']
    })

    this.formTindakan = this.fb.group({
      procedure_code: [''],
      procedure_display: ['']})

    this.formPelaporanImunisasi = this.fb.group({
      imunisasi_tidak_disetujui: [''],
      imunisasi_by_nakes: [''],
      imunisasi_kipi_by_nakes: [''],
      imunisasi_kipi_by_pasien: [''],
      imunisasi_by_kader: ['']
    })

    this.formUpdateKunjungan = this.fb.group({
      status: ['finished'],
      start_period: [''],
      end_period: [''],
      diagnosis_display: ['']
    })
  }

  // methods
  ngOnInit() {
    this.docreateKunjunganImunisasi()
  }

  openTab(tab: string) {
    this.activeTab = tab
  }

  showLoading() {
    Swal.fire('Mohon tunggu!')
    Swal.showLoading()
    this.stopLoading(5000)
  }

  stopLoading(timing: number = 1000) {
    setTimeout(() => { Swal.close() }, timing)
  }

  simpan() {
    switch (this.activeTab) {
      case 'form-observasi-imunisasi':
        this.doSubmitObservasi() 
      break
    }
  }

  async docreateKunjunganImunisasi() {
    this.showLoading()
    this.patientData = await this.getPasien()
    this.cabangData = await this.getCabang()
    await this.setIdPasien()

    let response: any = await this.imunisasiService.createKunjunganImunisasi({
      data: {
          rmno: this.notransaksi,
          orgId: this.cabangData.kodeorg,
          patientId: this.idpasien,
          patientName: this.patientData.pasien,
          practitionerId: this.patientData.idhis,
          practitionerName: this.patientData.namdokter,
          locationId: this.patientData.locationid,
          satusehatId: this.patientData.idsatusehat
      }
    })
    this.useCaseId = response.data.use_case_id
    this.getDataPatient()
  }

  async doSubmitObservasi(){
    var data = {
      rmno: this.notransaksi,
      useCaseId: this.useCaseId,
      satusehatId: this.patientData.idsatusehat
    }

    let observations = {
      observations : [
        {
          pregnancy_observation: {
            category: {
              system: "http://terminology.hl7.org/CodeSystem/observation-category",
              code: "survey",
              display: "Survey"
            },
            question_answers: [
              {
                question:  {
                  system: "http://loinc.org",
                  code: "82810-3",
                  display: "Pregnancy status"
                },
                answer: {
                  system: "http://loinc.org",
                  code: this.formObservation.value.status_pregnant_code,
                  display: this.formObservation.value.status_pregnant_display
                }
              }
            ]
          }
        },
        {
          education_observation: {
            category: {
              system: "http://terminology.hl7.org/CodeSystem/observation-category",
              code: "social-history",
              display: "Social History"
            },
            question_answers: [
              {
                question: {
                  system: "http://terminology.kemkes.go.id/CodeSystem/clinical-term",
                  code: "OC000135",
                  display: "Status sekolah"
                },
                answer: {
                  system: "http://terminology.kemkes.go.id/CodeSystem/clinical-term",
                  code: this.formObservation.value.status_sekolah_code,
                  display: this.formObservation.value.status_sekolah_display
                }
              }
            ]
          }
        }
      ]
    }
    
    let conditions = {
      conditions: [
        {
          encounter_diagnosis_condition: {
            clinical_status: {
              system: "http://terminology.hl7.org/CodeSystem/condition-clinical",
              code: "active",
              display: "Active"
            },
            category: {
              system: "http://terminology.hl7.org/CodeSystem/condition-category",
              code: "encounter-diagnosis",
              display: "Encounter Diagnosis"
            },
            condition_item: {
              system: "http://hl7.org/fhir/sid/icd-10",
              code: this.formDiagnosa.value.diagnosa_code,
              display: this.formDiagnosa.value.diagnosa_display
            },
            onset_date_time: this.dateNow,
            recorded_date: this.dateNow
          }
        ]
      }
    }

    let procedures = {
      procedures: [
        {
          vaccination_procedure: {
            coding: [
              {
                system: "http://hl7.org/fhir/sid/icd-9-cm",
                code: this.formTindakan.value.procedure_code,
                display: this.formTindakan.value.procedure_display
              }
            ]
          },
          status: {
            system: "http://terminology.hl7.org/CodeSystem/procedure-status",
            code: "completed",
            display: "Completed"
          },
          category: {
            system: "http://snomed.info/sct",
            code: "107733003",
            display: "Introduction Procedure"
          },
          performed_date_time: this.dateNow
        }
      ]
    }
    
    let reportImunisasi = {
      reportImunisasi: this.formPelaporanImunisasi.value
    }

    let periode = {
      start: this.formUpdateKunjungan.value.start_period ? new Date(this.formUpdateKunjungan.value.start_period).toISOString() : '',
      end: this.formUpdateKunjungan.value.start_period ? new Date(this.formUpdateKunjungan.value.start_period).toISOString() : ''
    }

    let update_data = {
      update_data: {
        status: "finished",
        period: periode,
        diagnosis: {
            id: '',
            display: this.formUpdateKunjungan.value.diagnosis_display,
            role: {
                system: "http://terminology.hl7.org/CodeSystem/diagnosis-role",
                code: "DD",
                display: "Discharge diagnosis"
            }
        },
        statusHistory: [
            {
                status: "arrived",
                periode: periode
            },
            {
                status: "in-progress",
                periode: periode
            },
            {
                status: "finished",
                periode: periode
            }
        ]
      }
    }

    this.showLoading()
    let response1: any = await this.imunisasiService.observationImunisasi({ data: { ...data, ...observations } })
    let response2: any = await this.imunisasiService.diagnosaImunisasi({ data: { ...data, ...conditions } })
    let response3: any = await this.imunisasiService.tindakanImunisasi({ data: { ...data, ...procedures } })
    let response4: any = await this.imunisasiService.reportImunisasiImunisasi({ data: { ...data, ...reportImunisasi } })
    
    update_data.update_data.diagnosis.id = response2.id
    let response5: any = await this.imunisasiService.updateKunjunganImunisasi({ data: { ...data, ...update_data } })
    
    if (response1.statusCode != '00') {
      Swal.fire(response1.statusMsg.split(': ')[0], response1.statusMsg.split(': ')[1], 'error')
    }
    else if(
      response2.statusCode != '00'
    ) {
      Swal.fire(response2.statusMsg.split(': ')[0], response2.statusMsg.split(': ')[1], 'error')
    }
    else if(
      response3.statusCode != '00'
    ) {
      Swal.fire(response3.statusMsg.split(': ')[0], response3.statusMsg.split(': ')[1], 'error')
    }
    else if(
      response4.statusCode != '00'
    ) {
      Swal.fire(response4.statusMsg.split(': ')[0], response4.statusMsg.split(': ')[1], 'error')
    }
    else if(
      response5.statusCode != '00'
    ) {
      Swal.fire(response5.statusMsg.split(': ')[0], response5.statusMsg.split(': ')[1], 'error')
    }
    
    else if(
      response1.statusCode == '00' && 
      response2.statusCode == '00' && 
      response3.statusCode == '00' && 
      response4.statusCode == '00' && 
      response5.statusCode == '00'
    ) {
      Swal.fire(response1.statusMsg.split(': ')[0], response1.statusMsg.split(': ')[1], 'success')
    } 
  }

  async setIdPasien() {
    if (!this.patientData.idpasien) {
      let idpasien = await this.getPasienSatuSehat()
      if (!idpasien) {
        Swal.fire('Data Pasien Tidak ditemukan di SatuSehat')
      } else {
        this.idpasien = idpasien
        this.isDisabledFormAnc = false
      }
    } else {
      this.idpasien = this.patientData.idpasien
      this.isDisabledFormAnc = false
    }

    return this.idpasien
  }

  async getDataPatient() {
    let response: any = await this.ancService.getDataPatient({
      patientId: this.idpasien,
      rmno: this.notransaksi,
      usecase_id: this.useCaseId,
      type: "IMUNISASI",
      status: "active"
    })

    let patient = response.data
    if (patient) {
      if (patient?.observations) {
        this.formObservation.patchValue({
          status_pregnant_code: patient?.observations[0]?.pregnancy_observation?.question_answers[0]?.answer.code,
          status_pregnant_display: patient?.observations[0]?.pregnancy_observation?.question_answers[0]?.answer.display,
          status_sekolah_code: patient?.observations[1]?.education_observation?.question_answers[0]?.answer.code,
          status_sekolah_display: patient?.observations[1]?.education_observation?.question_answers[0]?.answer.display})
      }

      if (patient?.conditions) {
        this.formDiagnosa.patchValue({
          diagnosa_code: patient?.conditions[0]?.encounter_diagnosis_condition?.condition_item.code,
          diagnosa_display: patient?.conditions[0]?.encounter_diagnosis_condition?.condition_item.display
        })
      }

      if (patient?.procedures) {
        this.formTindakan.patchValue({
          procedure_code: patient?.procedures[0]?.vaccination_procedure?.coding[0]?.code,
          procedure_display: patient?.procedures[0]?.vaccination_procedure?.coding[0]?.display
        })
      }

      if (patient?.reportImunisasi) {
        this.formPelaporanImunisasi.patchValue(patient.reportImunisasi)
        this.reportImunisasi = patient.reportImunisasi
      } else {
        this.reportImunisasi = {
          imunisasi_tidak_disetujui: null,
          imunisasi_by_nakes: null,
          imunisasi_kipi_by_nakes: null,
          imunisasi_kipi_by_pasien: null,
          imunisasi_by_kader: null
        }
      }

      if (patient?.update_data) {
        this.formUpdateKunjungan.patchValue({
          diagnosis_display: patient?.update_data?.diagnosis?.display,
          start_period: patient?.update_data?.period?.start ? patient.update_data.period.start.split('T')[0] : '',
          end_period: patient?.update_data?.period?.end ? patient.update_data.period.end.split('T')[0] : ''
        })
      }
    }
    this.stopLoading()
  }

  stringify(data: any) {
    return JSON.stringify(data)
  }

  getPasien() {
    return new Promise((resolve) => {
      this.api.datapasien(this.userData.kdcabang, this.notransaksi)
        .subscribe((data) => {
          data.forEach(e => {
            resolve(e)
          })
        })
    })
  }

  getPasienSatuSehat() {
    return new Promise((resolve) => {
      this.api.getpasien(
        this.patientData.nopengenal,
        this.headers
      ).subscribe((data) => {
        if (data.entry.length !== 0) {
          resolve(data.entry[0].resource.id)
        }
      })
    })
  }

  getCabang() {
    return new Promise((resolve) => {
      this.api.cabangper(this.userData.kdklinik)
        .subscribe((data) => {
          data.forEach(e => {
            resolve(e)
          })
        })
    })
  }

  onSelectedVaccine(form: any, data: any, status = 'completed') {
    let reason: any = [{
      system: 'http://terminology.kemkes.go.id/CodeSystem/immunization-reason',
      code: 'IM-Dasar',
      display: 'Imunisasi Program Rutin Dasar'
    }]
    
    form.setValue({
      status: status,
      vacine: data,
      reason: reason,
      dosis: 1
    })
  }

  removeNullValues(obj: Object) {
    if (typeof obj !== 'object' || obj === null) return obj; // Jika bukan object, kembalikan nilai asli

    // Iterasi pada setiap properti
    for (const key in obj) {
        if (obj[key] === null) {
            delete obj[key]; // Hapus properti jika nilainya null
        } else if (typeof obj[key] === 'object') {
            obj[key] = this.removeNullValues(obj[key]); // Rekursif untuk objek bersarang
        }
    }

    return obj;
  }
}

